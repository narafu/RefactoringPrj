어댑터 패턴(Adaptor Pattern)

한 클래스의 인터페이스를 클라이언트에서 사용하고자 하는 다른 인터페이스로 변환한다.
이 패턴을 사용하면 다른 인터페이스와의 호환성 문제를 해결할 수 있다.

호환성이 없는 인터페이스 때문에 함께 동작할 수 없는 클래스들이 함께 동작하도록 해주는 패턴이다.
래거시 인터페이스를 새로운 인터페이스로 교체하는 경우에, 코드의 재사용성을 높일 수 있는 방법이다.

예를 들어, 
A 인터페이스를 구현한 Aimpl 클래스는 A의 틀을 갖는다.
B 인터페이스를 구현한 Bimpl 클래스는 B의 틀을 갖는다.
그런데,
A 인터페이스를 구현한 클래스에서,
	B 인터페이스를 구현한 Bimpl과 같이 구현하고 싶다면??
		A의 틀에다가, B의 코드 내용을 복붙해야 할까?
		A인터페이스를 구현했지만, B를 호출할 수는 없을까??
			이런 상황에서, Adaptor를 쓴다......