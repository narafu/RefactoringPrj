싱글톤 패턴(singleton pattern)

전역 변수를 사용하지 않고 객체를 하나만 생성하도록 하며,
	생성된 객체를 어디에서든지 참조할 수 있도록 하는 패턴이다.
	
인스턴스가 오직 1개만 생성되야 하는 경우에 사용하는 패턴이다.

싱글톤은 private constructor와 static method를 사용한다.

	*Eager Initialization(이른 초기화, Thread-safe)
		
		이른 초기화 방식은,
		static 키워드의 특징을 이용해서,
		클래스 로더가 초기화하는 시점에 정적바인딩(컴파일 시점에 성격이 결정됨)을 통해,
		인스턴스를 생성한다.
		
		클래스 로더에 의해 클래스가 최초로 로딩될 때 객체가 생성되기 때문에 Thread-safe하다.
		
		
	*Lazy Initialization with synchronized(동기화 블럭, Thread-safe)
		
		게으른 초기화 방식은,
		컴파일 시점에 인스턴스를 생성하는 것이 아니라,
		인스턴스가 필요한 시점에 요청하여 동적바인딩(런다임 시점에 성격이 결정됨)을 통해,
		인스턴스를 생성한다.

		synchronized 키워드를 사용하면,
		인스턴스가 생성되었든 되지 않았든 무조건 동기화 블럭을 거친다.
		무조건 동기화 블럭을 거치기 때문에, 성능이 100배 가량 좋지 않다..
		
		
	*Lazy Initialization. Double Checking Locking(DCL, Thread-safe)
		
		이 방식은, 
		인스턴스가 생성되지 않은 경우에만 동기화 블럭이 실행된다.
		
		volatile 키워드는,
		멀티스레딩을 쓰더라도 uniqueInstance 변수가 Singleton 인스턴스로 초기화되는 과정을
		올바르게 진행되도록 한다.
		
		
	*Lazy Initialization. enum(열거 상수 클래스, Thread-safe)
		
		enum 방식은,
		만들려는 싱글톤이 enum외의 클래스를 상속해야 하는 경우에는 사용할 수 없다.
		또한 초기화 과정에서, Context라는 의존성이 끼여들 수 있다.
		
		
	**Lazy Initialization. LazyHolder(게으른 홀더, Thread-safe)
	
		가장 많이 사용하는 방식이다.
		volatile나 synchronized 키워드 없이 동시성 문제를 해결하기에,
		성능이 뛰어나다.
		
		InnerInstanceClazz 클래스의 변수가 없기 때문에,
		static 멤버 클래스라도, 클래스 로더가 초기화 과정을 진행할 때,
		InnerInstanceClazz 메소드를 초기화하지 않고,
		getInstance() 메소드를 호출할 때 초기화된다.
			동적바인딩의 특징을 이용하여 Thread-safe 성능이 뛰어나다.
			
		InnerInstanceClazz 내부 인스턴스는 static이기 때문에,
		클래스 로딩 시점에 한번만 호출된다.
		또한, final을 써서 다시 값이 할당되지 않는다.
		
		
		
		
		